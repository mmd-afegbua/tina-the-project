Description:
    Momodu Afegbua - Cloud DevOps Engineer Nanodegree - Capstone - April 2020

Parameters:
    EnvironmentName:
        Description: An Environment name that will be prefixed to resources
        Type: String
    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.0.0/16
    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.0.0/24
    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.1.0/24
    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for this - Public Subnet
        Type: String
        Default: 10.0.2.0/24
    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for this - Public Subnet
        Type: String
        Default: 10.0.3.0/24
    KeyName:
        Description: EC2 Keypair for bastion
        Type: String


Resources:
#Virtual Private Network
#Four (4) Subnets; Two(2) Public and Two(2) Private
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
          -   Key: Name
              Value: !Sub ${EnvironmentName}-vpc
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PrivateSubnet1CIDR
        MapPublicIpOnLaunch: false
        Tags:
            -   Key: Name
                Value: !Sub ${EnvironmentName}-private-subnet-AZ1
  PrivateSubnet2:
     Type: AWS::EC2::Subnet
     Properties:
         VpcId: !Ref VPC
         AvailabilityZone: !Select [ 1, !GetAZs '' ]
         CidrBlock: !Ref PrivateSubnet2CIDR
         MapPublicIpOnLaunch: false
         Tags:
            -   Key: Name
                Value: !Sub ${EnvironmentName}-private-subnet-AZ2
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PublicSubnet1CIDR
        MapPublicIpOnLaunch: true
        Tags:
            -   Key: Name
                Value: !Sub ${EnvironmentName}-public-subnet-AZ1
  PublicSubnet2:
     Type: AWS::EC2::Subnet
     Properties:
         VpcId: !Ref VPC
         AvailabilityZone: !Select [ 1, !GetAZs '' ]
         CidrBlock: !Ref PublicSubnet2CIDR
         MapPublicIpOnLaunch: true
         Tags:
            -   Key: Name
                Value: !Sub ${EnvironmentName}-public-subnet-AZ2
#Internet Gateway is needed to direct traffic from
#the internet to the VPC created up there.

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
         - Key: Name
           Value: !Sub ${EnvironmentName}-igw

#GatewayAttachment attaches the InternetGateway to the VPC           
  InternetGatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# Elastic IP address is needed for each availability zone(2)
#  NatGateway1EIP:
#    Type: AWS::EC2::EIP
#    DependsOn: InternetGatewayAttachement
#    Properties:
#      Domain: vpc
#  NatGateway2EIP:
#    Type: AWS::EC2::EIP
#    DependsOn: InternetGatewayAttachement
#    Properties:
#      Domain: vpc

# NatGateway is needed in the two PublicSubnets
# They will enable communications between applications
# in PrivateSubnet(s)

#  NatGateway1:
#    Type: AWS::EC2::NatGateway
#    Properties:
#        AllocationId: !GetAtt NatGateway1EIP.AllocationId
#        SubnetId: !Ref PublicSubnet1
#       Tags:
#           -   Key: Name
#               Value: !Sub ${EnvironmentName}-nat-gateway-1
#  NatGateway2:
#    Type: AWS::EC2::NatGateway
#    Properties:
#        AllocationId: !GetAtt NatGateway2EIP.AllocationId
#        SubnetId: !Ref PublicSubnet2
#        Tags:
#           -   Key: Name
#               Value: !Sub ${EnvironmentName}-nat-gateway-2

# Public RouteTable, Routes and RouteAssociations for PublicSubnets
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
         -   Key: Name
             Value: !Sub ${EnvironmentName}-public-route-table
  
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachement
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable
  
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

# Private RouteTable, Routes and RouteAssociations for PrivateSubnets

  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref RouteTable

  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref RouteTable  


Outputs:
  VPC:
    Description: AWS VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${EnvironmentName}-VPCID"
  Subnets:
    Description: Four of thr subnets
    Value: !Join [",", [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PrivateSubnet1, !Ref PrivateSubnet2 ] ]
    Export:
      Name: !Sub "${EnvironmentName}-SUBNET"    
  PrivateSubnet1:
    Description: Private Subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${EnvironmentName}-PRI-SUB-1"
  PrivateSubnet2:
    Description: Private Subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${EnvironmentName}-PRI-SUB-2"
  PublicSubnet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${EnvironmentName}-PUB-SUB-1"
  PublicSubnet2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${EnvironmentName}-PUB-SUB-2"
                